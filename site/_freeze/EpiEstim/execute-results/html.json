{
  "hash": "fe1c718f79ad59a89bff68a6c5b8745f",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"EpiEstim in Julia\"\n---\n\n\nEpiEstim assumes that $R_t$ is fixed over trailing windows of length $k$. This notebook:\n\n- Demonstrates how to fit EpiEstim with a fixed value of $k$\n- How to find the posterior distribution of $k$\n- How to marginalise out $k$ to present robust estimates of $R_t$\n- How to find the predictive distribution for reported cases\n- How to calculate predictive coverage and scoring rule values\n\nAll code can be found in the `/src/` folder of the [GitHub repository](https://github.com/nicsteyn2/RobustRtEstimators). We recommend cloning this repository and then opening `EpiEstim.ipynb` in your preferred Jupyter notebook environment.\n\n## Setting up\n\nFirst, we need to load the necessary source code and data. We will use data from the 2021 August outbreak of SARS-CoV-2 in Aotearoa New Zealand. The serial interval is assumed to be gamma-distributed with mean 6.5 days and standard deviation 4.2 days [@paragDecipheringEarlywarningSignals2021; @fergusonReportImpactNonpharmaceutical2020].\n\n::: {#52a0ece2 .cell execution_count=1}\n``` {.julia .cell-code}\nusing Plots, Measures # Load package for plotting\n\n# Ensure we are working in the root directory\n# You may need to edit this for your own machine\nconst rootdir = @__DIR__\ncd(joinpath(rootdir, \"..\"))\n\n# Load source files\ninclude(\"src/EpiEstim.jl\")\ninclude(\"src/support.jl\")\n\n# Load data\n(Ct, w) = loadData(\"NZCOVID_AUG2021\")\ndates = Date(\"2021-08-17\") .+ Day.(0:181)\n\n# Plot\nbar(dates, Ct, size=(800,400), label=false, ylabel=\"Reported cases\", xlabel=\"Date\", title=\"NZ COVID-19 cases (local transmission only)\", margins=3mm, color=\"#f25a2a\")\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n![Reported cases of COVID-19 from between 17 August 2021 and 14 February 2022.](EpiEstim_files/figure-html/cell-2-output-1.svg){}\n:::\n:::\n\n\n## Fitting default EpiEstim\n\nWe can fit the default EpiEstim model (with $k = 7$) using the ```EpiEstim(k, w, Ct)``` function:\n\n::: {#3c044654 .cell execution_count=2}\n``` {.julia .cell-code}\n# Fit the model\npRt = EpiEstim(7, w, Ct)\n\n# Extract mean and 95% credible interval\n(m, l, u) = (mean.(pRt), quantile.(pRt, 0.025), quantile.(pRt, 0.975))\n\n# Plot output\nplotR = plot(dates[3:end], m[3:end], ribbon=(m[3:end]-l[3:end], u[3:end]-m[3:end]), fillalpha=0.3, label=false, ylabel=\"Reproduction number\", xlabel=\"Date\", size=(600,300), color=\"#13643f\")\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n![](EpiEstim_files/figure-html/cell-3-output-1.svg){}\n:::\n:::\n\n\n## Likelihood and posterior distribution for $k$\n\nWe can calculate the likelihood on a range of $k$ values:\n\n::: {#1b1c0f36 .cell execution_count=3}\n``` {.julia .cell-code}\nkvals = collect(1:30) # We will consider k = 1, 2, ..., 30\n(loglik, _) = EpiEstimLogLik(kvals, w, Ct; windin=3)\nbar(kvals, loglik[:,end], label=false, ylabel=\"Log-likelihood\", xlabel=\"k\", size=(600,300))\n```\n\n::: {.cell-output .cell-output-display execution_count=14}\n![Log-likelihood of $k = 1, \\ldots, 30$](EpiEstim_files/figure-html/cell-4-output-1.svg){}\n:::\n:::\n\n\nBy assuming a uniform prior distribution for $k$ and normalising, we can calculate the posterior distribution of $k$ given our observed data:\n\n::: {#50277da8 .cell execution_count=4}\n``` {.julia .cell-code}\npK = exp.(loglik .- maximum(loglik, dims=1)) # Apply Bayes' theorem\npK = pK ./ sum(pK, dims=1) # Normalise\nbar(kvals, pK[:,end], label=false, ylabel=\"Posterior probability\", xlabel=\"k\", size=(600,300))\n```\n\n::: {.cell-output .cell-output-display execution_count=15}\n![Posterior distribution of $k$.](EpiEstim_files/figure-html/cell-5-output-1.svg){}\n:::\n:::\n\n\nIn this case it is clear that $k = 2$ is the most likely value given the data. We could just run EpiEstim at $k = 2$, but let's be more thorough and use the full marginal posterior estimator.\n\n## Marginal posterior distribution for $R_t$\n\nTo find the marginal posterior distribution for $R_t$, we need to specify a grid of $R_t$ values to average over. We can then use the ```EpiEstimMarginalPosterior()``` function to calculate the marginal posterior distribution of $R_t$.\n\n::: {#21f07b97 .cell execution_count=5}\n``` {.julia .cell-code}\nRgrid = LinRange(0.01, 10, 1000)\npR = EpiEstimMarginalPosterior(w, Ct, Rgrid; windin=3)\n(m, med, l, u) = calculateResults(pR, Rgrid)\nplot!(plotR, dates[4:end], m[4:end], ribbon=(m[4:end]-l[4:end], u[4:end]-m[4:end]), fillalpha=0.3, ylabel=\"Reproduction number\", xlabel=\"Date\", size=(600,300), label=\"Marginalised estimates\")\n```\n\n::: {.cell-output .cell-output-display execution_count=16}\n![Posterior distribution of $R_t$ from the default model (green) and the marginalised model (orange), demonstrating the additional uncertainty arising from $k$.](EpiEstim_files/figure-html/cell-6-output-1.svg){}\n:::\n:::\n\n\n## Predictive distributions\n\nWe can also estimate the default and marginalised predictive distributions for reported cases. We also calculate predictive coverages as we go (reported in the next section).\n\n::: {#bb13906d .cell execution_count=6}\n``` {.julia .cell-code}\n# Default\npCdefault = EpiEstimConditionalPredictive(7, w, Ct)\n(m, med, l, u) = calculateResults(pCdefault)\ndefault_coverage = mean((l[4:end] .<= Ct[4:end]) .& (Ct[4:end] .<= u[4:end]))\nplotCases = plot(4:length(m), m[4:end], ribbon=(m[4:end]-l[4:end], u[4:end]-m[4:end]), label=\"Default\", ylabel=\"Reported cases\", xlabel=\"Days\")\n\n# Marginalised\nCgrid = 0:(10*maximum(Ct))\npC = EpiEstimMarginalPredictive(w, Ct, Cgrid, windin=3)\n(m, med, l, u) = calculateResults(pC, Cgrid)\nmarginalised_coverage = mean((l[4:end] .<= Ct[4:end]) .& (Ct[4:end] .<= u[4:end]))\nplot!(plotCases, 4:length(m), m[4:end], ribbon=(m[4:end]-l[4:end], u[4:end]-m[4:end]), label=\"Marginalised\")\n\n# Also show the observed data\nscatter!(plotCases, 1:length(Ct), Ct, label=\"Observed\", color=:black, markersize=1.5)\n```\n\n::: {.cell-output .cell-output-display execution_count=17}\n![](EpiEstim_files/figure-html/cell-7-output-1.svg){}\n:::\n:::\n\n\n## Predictive coverage and scoring rules\n\nCalculating predictive coverage:\n\n::: {#6edd4c20 .cell execution_count=7}\n``` {.julia .cell-code}\nprintln(\"Predictive coverage of default EpiEstim = $(round(100*default_coverage))%\")\nprintln(\"Predictive coverage of marginalised EpiEstim = $(round(100*marginalised_coverage))%\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nPredictive coverage of default EpiEstim = 87.0%\nPredictive coverage of marginalised EpiEstim = 99.0%\n```\n:::\n:::\n\n\nand the **CRPS** (lower is better) for each model:\n\n::: {#d26f94d4 .cell execution_count=8}\n``` {.julia .cell-code}\ninclude(\"src/scoringRules.jl\")\ndefault_crps = CRPS(pCdefault, Ct, windin=3)\nmarginalised_crps = CRPS(cumsum(pC, dims=1), Cgrid, Ct, windin=3)\n\nprintln(\"CRPS of default EpiEstim = $(default_crps)\")\nprintln(\"CRPS of marginalised EpiEstim = $(marginalised_crps)\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCRPS of default EpiEstim = 9.748611012811024\nCRPS of marginalised EpiEstim = 5.577113951260321\n```\n:::\n:::\n\n\n",
    "supporting": [
      "EpiEstim_files/figure-html"
    ],
    "filters": [],
    "includes": {}
  }
}