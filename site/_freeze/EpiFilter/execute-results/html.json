{
  "hash": "61b719846af78ea7d4c172d6452e7cd3",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"EpiFilter in Julia\"\n---\n\n\n\n\nEpiFilter assumes that $R_t$ follows a Gaussian random walk with standard deviation at time-step $t$ equal to $\\eta\\sqrt{R_{t-1}}$. This notebook:\n\n- Demonstrates how to fit EpiFilter with a fixed value of $\\eta$\n- How to find the posterior distribution of $\\eta$\n- How to marginalise out $\\eta$ to present robust estimates of $R_t$\n- How to find the predictive distribution for reported cases\n- How to calculate predictive coverage and scoring rule values\n\nAll code can be found in the `/src/` folder of the [GitHub repository](https://github.com/nicsteyn2/RobustRtEstimators). We recommend cloning this repository and then opening `EpiFilter.ipynb` in your preferred Jupyter notebook environment.\n\n## Setting up\n\nFirst, we need to load the necessary source code and data. We will use data from the 2021 August outbreak of SARS-CoV-2 in Aotearoa New Zealand. The serial interval is assumed to be gamma-distributed with mean 6.5 days and standard deviation 4.2 days [@paragDecipheringEarlywarningSignals2021; @fergusonReportImpactNonpharmaceutical2020].\n\n::: {#c6809559 .cell execution_count=1}\n``` {.julia .cell-code}\nusing Plots, Measures # Load package for plotting\n\n# Ensure we are working in the root directory\n# You may need to edit this for your own machine\nconst rootdir = @__DIR__\ncd(joinpath(rootdir, \"..\"))\n\n# Load source files\ninclude(\"src/EpiFilter.jl\")\ninclude(\"src/support.jl\")\n\n# Load data\n(Ct, w) = loadData(\"NZCOVID_AUG2021\")\ndates = Date(\"2021-08-17\") .+ Day.(0:181)\n\n# Plot\nbar(dates, Ct, size=(800,400), label=false, ylabel=\"Reported cases\", xlabel=\"Date\", title=\"NZ COVID-19 cases (local transmission only)\", margins=3mm, color=\"#f25a2a\")\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n![Reported cases of COVID-19 from between 17 August 2021 and 14 February 2022.](EpiFilter_files/figure-html/cell-2-output-1.svg){}\n:::\n:::\n\n\n## Fitting default EpiFilter\n\nWe can fit the default EpiFilter model (with $\\eta = 0.1$) using the ```EpiFilter(η, w, Ct)``` function:\n\n::: {#433e9d73 .cell execution_count=2}\n``` {.julia .cell-code}\n# Fit the model\nRgrid = LinRange(0.01, 10, 1000)\n(pRt, _, _) = EpiFilterForwards(0.1, w, Ct, Rgrid)\n\n# Extract mean and 95% credible interval\n(m, med, l, u) = calculateResults(pRt, Rgrid)\n\n# Plot output\nplotR = plot(dates[3:end], m[3:end], ribbon=(m[3:end]-l[3:end], u[3:end]-m[3:end]), fillalpha=0.3, label=false, ylabel=\"Reproduction number\", xlabel=\"Date\", size=(600,300), color=\"#13643f\")\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n![](EpiFilter_files/figure-html/cell-3-output-1.svg){}\n:::\n:::\n\n\nSide-note: we also provide a function ```EpiFilterBackwards()``` which runs the backward-smoother version of EpiFilter. As our focus is on real-time estimation, we will not use this function in this notebook.\n\n## Likelihood and posterior distribution for $\\eta$\n\nTo find the posterior distribution of $\\eta$, we run the model on a grid of values to estimate the likelihood, and normalise with respect to a prior distribution (in this case we use a uniform prior distribution on $(0, 1)$). This takes approximately 1 minute on a 2021 MacBook Pro.\n\n::: {#d451f115 .cell execution_count=3}\n``` {.julia .cell-code}\nηgrid = LinRange(0.001, 1, 1000) # The values of η to consider\npη0 = ones(length(ηgrid))/length(ηgrid) # A uniform prior on η\n(pη, pRgivenη, pRupgivenη) = EpiFilterRunAllη(w, Ct, Rgrid, pη0, ηgrid; windin=3, showProgress=false)\nplot(ηgrid, pη[:,end], label=false, xlabel=\"η\", ylabel=\"Posterior probability\", size=(600,300))\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n![](EpiFilter_files/figure-html/cell-4-output-1.svg){}\n:::\n:::\n\n\n## Marginal posterior distribution for $R_t$\n\nWe already have all the ingredients we need to find the marginal posterior distribution for $R_t$. We can use the ```EpiFilterMarginalPosterior()``` function to do this.\n\n::: {#7d0abef1 .cell execution_count=4}\n``` {.julia .cell-code}\npR = EpiFilterMarginalPosterior(pη, pRgivenη)\n(m, med, l, u) = calculateResults(pR, Rgrid)\nplotR = plot!(plotR, dates[3:end], m[3:end], ribbon=(m[3:end]-l[3:end], u[3:end]-m[3:end]), fillalpha=0.3, label=\"Marginalised\", ylabel=\"Reproduction number\", xlabel=\"Days since 17 August 2021\", size=(600,300))\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n![](EpiFilter_files/figure-html/cell-5-output-1.svg){}\n:::\n:::\n\n\n## Predictive distributions\n\nWe also have all the ingredients required for the predictive distributions:\n\n::: {#0ef15a25 .cell execution_count=5}\n``` {.julia .cell-code}\nCgrid = 0:(10*maximum(Ct))\n\n# Default\npCdefault = EpiFilterConditionalPredictive(0.1, w, Ct, Rgrid, Cgrid)\n(m, med, l, u) = calculateResults(pCdefault, Cgrid)\ndefault_coverage = mean((l[4:end] .<= Ct[4:end]) .& (Ct[4:end] .<= u[4:end]))\nplotCases = plot(4:length(m), m[4:end], ribbon=(m[4:end]-l[4:end], u[4:end]-m[4:end]), label=\"Default\", ylabel=\"Reported cases\", xlabel=\"Days\")\n\n# Marginalised\npC = EpiFilterMarginalPredictive(pη, pRupgivenη, w, Ct, Rgrid, Cgrid)\n(m, med, l, u) = calculateResults(pC, Cgrid)\nmarginal_coverage = mean((l[4:end] .<= Ct[4:end]) .& (Ct[4:end] .<= u[4:end]))\nplot!(plotCases, 4:length(m), m[4:end], ribbon=(m[4:end]-l[4:end], u[4:end]-m[4:end]), label=\"Marginalised\")\n\n# Also show the observed data\nscatter!(plotCases, 1:length(Ct), Ct, label=\"Observed\", color=:black, markersize=1.5)\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n![](EpiFilter_files/figure-html/cell-6-output-1.svg){}\n:::\n:::\n\n\n## Predictive coverage and scoring rules\n\nCalculating predictive coverage:\n\n::: {#d9e1a552 .cell execution_count=6}\n``` {.julia .cell-code}\nprintln(\"Predictive coverage of default EpiFilter = $(round(100*default_coverage))%\")\nprintln(\"Predictive coverage of marginalised EpiFilter = $(round(100*marginal_coverage))%\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nPredictive coverage of default EpiFilter = 97.0%\nPredictive coverage of marginalised EpiFilter = 98.0%\n```\n:::\n:::\n\n\nand the **CRPS** (lower is better) for each model:\n\n::: {#7febf333 .cell execution_count=7}\n``` {.julia .cell-code}\ninclude(\"src/scoringRules.jl\")\ndefault_crps = CRPS(cumsum(pCdefault, dims=1), Cgrid, Ct, windin=3)\nmarginalised_crps = CRPS(cumsum(pC, dims=1), Cgrid, Ct, windin=3)\n\nprintln(\"CRPS of default EpiFilter = $(default_crps)\")\nprintln(\"CRPS of marginalised EpiFilter = $(marginalised_crps)\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCRPS of default EpiFilter = 6.765280808555216\nCRPS of marginalised EpiFilter = 6.54316604914828\n```\n:::\n:::\n\n\n",
    "supporting": [
      "EpiFilter_files/figure-html"
    ],
    "filters": [],
    "includes": {}
  }
}