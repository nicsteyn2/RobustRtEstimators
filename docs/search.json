[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Rt estimators in Julia",
    "section": "",
    "text": "We provide simple Julia implementations of two popular methods for reproduction number estimation: EpiEstim (Cori et al. 2013) and EpiFilter (Parag 2021). In addition to the original methods, we also provide functions for calculating model likelihoods and marginalising out uncertainty about model parameters from final estimates of \\(R_t\\).\nThese scripts were developed as part of Robust uncertainty quantification in popular estimators of the instantaneous reproduction number. All technical details can be found in this paper and the corresponding supplementary material.\n\n\nCode\nusing Plots, Measures\n\n# Ensure we are working in the root directory\nconst rootdir = @__DIR__\ncd(joinpath(rootdir, \"..\"))\n\n# Load scripts\ninclude(\"src/EpiEstim.jl\")\ninclude(\"src/support.jl\")\n\n# Set k parameter and load data\nk = 7\n(Ct, w) = loadData(\"NZCOVID\")\ndates = Date(\"2020-02-26\") + Day.(0:99)\n\n# Run the model and extract mean and credible intervals\npR = EpiEstim(k, w, Ct)\nm = mean.(pR)\nl = quantile.(pR, 0.025)\nu = quantile.(pR, 0.975)\n\n# Plot\nplot_cases = bar(dates, Ct, xlabel=\"Date\", ylabel=\"Reported cases\", label=false, size=(800, 400), margins=3mm, color=\"#f25a2a\")\nplot_Rt = plot(dates, m, ribbon=(m-l,u-m), label=false, xlabel=\"Date\", ylabel=\"Reproduction number\", size=(800,400), margins=3mm, color=\"#13643f\")\nhline!(plot_Rt, [1], label=false, color=:black, linestyle=:dash)\nplot(plot_cases, plot_Rt, layout=(2,1), size=(800,600))\n\n\n\n\n\nReported cases from the first 100 days of the COVID-19 pandemic in Aotearoa New Zealand (upper) and the estimated reproduction number using EpiEstim with a default smoothing value of k = 7 (lower). Data were obtained from the Ministry of Health.\n\n\n\n\nOther than a Julia installation, no external software is required to run this code. All functions are provided in the /src/ directory of the GitHub repository.\n\n\n\n\nReferences\n\nCori, Anne, Neil M. Ferguson, Christophe Fraser, and Simon Cauchemez. 2013. “A New Framework and Software to Estimate Time-Varying Reproduction Numbers During Epidemics.” American Journal of Epidemiology 178 (9): 1505–12. https://doi.org/10.1093/aje/kwt133.\n\n\nParag, Kris V. 2021. “Improved Estimation of Time-Varying Reproduction Numbers at Low Case Incidence and Between Epidemic Waves.” PLOS Computational Biology 17 (9): e1009347. https://doi.org/10.1371/journal.pcbi.1009347."
  },
  {
    "objectID": "EpiFilter.html",
    "href": "EpiFilter.html",
    "title": "EpiFilter",
    "section": "",
    "text": "EpiFilter assumes that \\(R_t\\) follows a Gaussian random walk with standard deviation at time-step \\(t\\) equal to \\(\\eta\\sqrt{R_{t-1}}\\). This notebook:\nAll code can be found in the /src/ folder of the GitHub repository. We recommend cloning this repository and then opening EpiFilter.ipynb in your preferred Jupyter notebook environment."
  },
  {
    "objectID": "EpiFilter.html#setting-up",
    "href": "EpiFilter.html#setting-up",
    "title": "EpiFilter",
    "section": "Setting up",
    "text": "Setting up\nFirst, we need to load the necessary source code and data. We will use data from the 2021 August outbreak of SARS-CoV-2 in Aotearoa New Zealand. The serial interval is assumed to be gamma-distributed with mean 6.5 days and standard deviation 4.2 days (Parag, Cowling, and Donnelly 2021; Ferguson et al. 2020).\n\nusing Plots, Measures # Load package for plotting\n\n# Ensure we are working in the root directory\n# You may need to edit this for your own machine\nconst rootdir = @__DIR__\ncd(joinpath(rootdir, \"..\"))\n\n# Load source files\ninclude(\"src/EpiFilter.jl\")\ninclude(\"src/support.jl\")\n\n# Load data\n(Ct, w) = loadData(\"NZCOVID_AUG2021\")\ndates = Date(\"2021-08-17\") .+ Day.(0:181)\n\n# Plot\nbar(dates, Ct, size=(800,400), label=false, ylabel=\"Reported cases\", xlabel=\"Date\", title=\"NZ COVID-19 cases (local transmission only)\", margins=3mm, color=\"#f25a2a\")\n\n\n\n\nReported cases of COVID-19 from between 17 August 2021 and 14 February 2022."
  },
  {
    "objectID": "EpiFilter.html#fitting-default-epifilter",
    "href": "EpiFilter.html#fitting-default-epifilter",
    "title": "EpiFilter",
    "section": "Fitting default EpiFilter",
    "text": "Fitting default EpiFilter\nWe can fit the default EpiFilter model (with \\(\\eta = 0.1\\)) using the EpiFilter(η, w, Ct) function:\n\n# Fit the model\nRgrid = LinRange(0.01, 10, 1000)\n(pRt, _, _) = EpiFilterForwards(0.1, w, Ct, Rgrid)\n\n# Extract mean and 95% credible interval\n(m, med, l, u) = calculateResults(pRt, Rgrid)\n\n# Plot output\nplotR = plot(dates[3:end], m[3:end], ribbon=(m[3:end]-l[3:end], u[3:end]-m[3:end]), fillalpha=0.3, label=false, ylabel=\"Reproduction number\", xlabel=\"Date\", size=(600,300), color=\"#13643f\")\n\n\n\n\n\n\n\n\nSide-note: we also provide a function EpiFilterBackwards() which runs the backward-smoother version of EpiFilter. As our focus is on real-time estimation, we will not use this function in this notebook."
  },
  {
    "objectID": "EpiFilter.html#likelihood-and-posterior-distribution-for-eta",
    "href": "EpiFilter.html#likelihood-and-posterior-distribution-for-eta",
    "title": "EpiFilter",
    "section": "Likelihood and posterior distribution for \\(\\eta\\)",
    "text": "Likelihood and posterior distribution for \\(\\eta\\)\nTo find the posterior distribution of \\(\\eta\\), we run the model on a grid of values to estimate the likelihood, and normalise with respect to a prior distribution (in this case we use a uniform prior distribution on \\((0, 1)\\)). This takes approximately 1 minute on a 2021 MacBook Pro.\n\nηgrid = LinRange(0.001, 1, 1000) # The values of η to consider\npη0 = ones(length(ηgrid))/length(ηgrid) # A uniform prior on η\n(pη, pRgivenη, pRupgivenη) = EpiFilterRunAllη(w, Ct, Rgrid, pη0, ηgrid; windin=3, showProgress=false)\nplot(ηgrid, pη[:,end], label=false, xlabel=\"η\", ylabel=\"Posterior probability\", size=(600,300))"
  },
  {
    "objectID": "EpiFilter.html#marginal-posterior-distribution-for-r_t",
    "href": "EpiFilter.html#marginal-posterior-distribution-for-r_t",
    "title": "EpiFilter",
    "section": "Marginal posterior distribution for \\(R_t\\)",
    "text": "Marginal posterior distribution for \\(R_t\\)\nWe already have all the ingredients we need to find the marginal posterior distribution for \\(R_t\\). We can use the EpiFilterMarginalPosterior() function to do this.\n\npR = EpiFilterMarginalPosterior(pη, pRgivenη)\n(m, med, l, u) = calculateResults(pR, Rgrid)\nplotR = plot!(plotR, dates[3:end], m[3:end], ribbon=(m[3:end]-l[3:end], u[3:end]-m[3:end]), fillalpha=0.3, label=\"Marginalised\", ylabel=\"Reproduction number\", xlabel=\"Days since 17 August 2021\", size=(600,300))"
  },
  {
    "objectID": "EpiFilter.html#predictive-distributions",
    "href": "EpiFilter.html#predictive-distributions",
    "title": "EpiFilter",
    "section": "Predictive distributions",
    "text": "Predictive distributions\nWe also have all the ingredients required for the predictive distributions:\n\nCgrid = 0:(10*maximum(Ct))\n\n# Default\npCdefault = EpiFilterConditionalPredictive(0.1, w, Ct, Rgrid, Cgrid)\n(m, med, l, u) = calculateResults(pCdefault, Cgrid)\ndefault_coverage = mean((l[4:end] .&lt;= Ct[4:end]) .& (Ct[4:end] .&lt;= u[4:end]))\nplotCases = plot(4:length(m), m[4:end], ribbon=(m[4:end]-l[4:end], u[4:end]-m[4:end]), label=\"Default\", ylabel=\"Reported cases\", xlabel=\"Days\")\n\n# Marginalised\npC = EpiFilterMarginalPredictive(pη, pRupgivenη, w, Ct, Rgrid, Cgrid)\n(m, med, l, u) = calculateResults(pC, Cgrid)\nmarginal_coverage = mean((l[4:end] .&lt;= Ct[4:end]) .& (Ct[4:end] .&lt;= u[4:end]))\nplot!(plotCases, 4:length(m), m[4:end], ribbon=(m[4:end]-l[4:end], u[4:end]-m[4:end]), label=\"Marginalised\")\n\n# Also show the observed data\nscatter!(plotCases, 1:length(Ct), Ct, label=\"Observed\", color=:black, markersize=1.5)"
  },
  {
    "objectID": "EpiFilter.html#predictive-coverage-and-scoring-rules",
    "href": "EpiFilter.html#predictive-coverage-and-scoring-rules",
    "title": "EpiFilter",
    "section": "Predictive coverage and scoring rules",
    "text": "Predictive coverage and scoring rules\nCalculating predictive coverage:\n\nprintln(\"Predictive coverage of default EpiFilter = $(round(100*default_coverage))%\")\nprintln(\"Predictive coverage of marginalised EpiFilter = $(round(100*marginal_coverage))%\")\n\nPredictive coverage of default EpiFilter = 97.0%\nPredictive coverage of marginalised EpiFilter = 98.0%\n\n\nand the CRPS (lower is better) for each model:\n\ninclude(\"src/scoringRules.jl\")\ndefault_crps = CRPS(cumsum(pCdefault, dims=1), Cgrid, Ct, windin=3)\nmarginalised_crps = CRPS(cumsum(pC, dims=1), Cgrid, Ct, windin=3)\n\nprintln(\"CRPS of default EpiFilter = $(default_crps)\")\nprintln(\"CRPS of marginalised EpiFilter = $(marginalised_crps)\")\n\nCRPS of default EpiFilter = 6.765280808555216\nCRPS of marginalised EpiFilter = 6.54316604914828"
  },
  {
    "objectID": "EpiEstim.html",
    "href": "EpiEstim.html",
    "title": "EpiEstim",
    "section": "",
    "text": "EpiEstim assumes that \\(R_t\\) is fixed over trailing windows of length \\(k\\). This notebook:\nAll code can be found in the /src/ folder of the GitHub repository. We recommend cloning this repository and then opening EpiEstim.ipynb in your preferred Jupyter notebook environment."
  },
  {
    "objectID": "EpiEstim.html#setting-up",
    "href": "EpiEstim.html#setting-up",
    "title": "EpiEstim",
    "section": "Setting up",
    "text": "Setting up\nFirst, we need to load the necessary source code and data. We will use data from the 2021 August outbreak of SARS-CoV-2 in Aotearoa New Zealand. The serial interval is assumed to be gamma-distributed with mean 6.5 days and standard deviation 4.2 days (Parag, Cowling, and Donnelly 2021; Ferguson et al. 2020).\n\nusing Plots, Measures # Load package for plotting\n\n# Ensure we are working in the root directory\n# You may need to edit this for your own machine\nconst rootdir = @__DIR__\ncd(joinpath(rootdir, \"..\"))\n\n# Load source files\ninclude(\"src/EpiEstim.jl\")\ninclude(\"src/support.jl\")\n\n# Load data\n(Ct, w) = loadData(\"NZCOVID_AUG2021\")\ndates = Date(\"2021-08-17\") .+ Day.(0:181)\n\n# Plot\nbar(dates, Ct, size=(800,400), label=false, ylabel=\"Reported cases\", xlabel=\"Date\", title=\"NZ COVID-19 cases (local transmission only)\", margins=3mm, color=\"#f25a2a\")\n\n\n\n\nReported cases of COVID-19 from between 17 August 2021 and 14 February 2022."
  },
  {
    "objectID": "EpiEstim.html#fitting-default-epiestim",
    "href": "EpiEstim.html#fitting-default-epiestim",
    "title": "EpiEstim",
    "section": "Fitting default EpiEstim",
    "text": "Fitting default EpiEstim\nWe can fit the default EpiEstim model (with \\(k = 7\\)) using the EpiEstim(k, w, Ct) function:\n\n# Fit the model\npRt = EpiEstim(7, w, Ct)\n\n# Extract mean and 95% credible interval\n(m, l, u) = (mean.(pRt), quantile.(pRt, 0.025), quantile.(pRt, 0.975))\n\n# Plot output\nplotR = plot(dates[3:end], m[3:end], ribbon=(m[3:end]-l[3:end], u[3:end]-m[3:end]), fillalpha=0.3, label=false, ylabel=\"Reproduction number\", xlabel=\"Date\", size=(600,300), color=\"#13643f\")"
  },
  {
    "objectID": "EpiEstim.html#likelihood-and-posterior-distribution-for-k",
    "href": "EpiEstim.html#likelihood-and-posterior-distribution-for-k",
    "title": "EpiEstim",
    "section": "Likelihood and posterior distribution for \\(k\\)",
    "text": "Likelihood and posterior distribution for \\(k\\)\nWe can calculate the likelihood on a range of \\(k\\) values:\n\nkvals = collect(1:30) # We will consider k = 1, 2, ..., 30\n(loglik, _) = EpiEstimLogLik(kvals, w, Ct; windin=3)\nbar(kvals, loglik[:,end], label=false, ylabel=\"Log-likelihood\", xlabel=\"k\", size=(600,300))\n\n\n\n\nLog-likelihood of \\(k = 1, \\ldots, 30\\)\n\n\n\n\nBy assuming a uniform prior distribution for \\(k\\) and normalising, we can calculate the posterior distribution of \\(k\\) given our observed data:\n\npK = exp.(loglik .- maximum(loglik, dims=1)) # Apply Bayes' theorem\npK = pK ./ sum(pK, dims=1) # Normalise\nbar(kvals, pK[:,end], label=false, ylabel=\"Posterior probability\", xlabel=\"k\", size=(600,300))\n\n\n\n\nPosterior distribution of \\(k\\).\n\n\n\n\nIn this case it is clear that \\(k = 2\\) is the most likely value given the data. We could just run EpiEstim at \\(k = 2\\), but let’s be more thorough and use the full marginal posterior estimator."
  },
  {
    "objectID": "EpiEstim.html#marginal-posterior-distribution-for-r_t",
    "href": "EpiEstim.html#marginal-posterior-distribution-for-r_t",
    "title": "EpiEstim",
    "section": "Marginal posterior distribution for \\(R_t\\)",
    "text": "Marginal posterior distribution for \\(R_t\\)\nTo find the marginal posterior distribution for \\(R_t\\), we need to specify a grid of \\(R_t\\) values to average over. We can then use the EpiEstimMarginalPosterior() function to calculate the marginal posterior distribution of \\(R_t\\).\n\nRgrid = LinRange(0.01, 10, 1000)\npR = EpiEstimMarginalPosterior(w, Ct, Rgrid; windin=3)\n(m, med, l, u) = calculateResults(pR, Rgrid)\nplot!(plotR, dates[4:end], m[4:end], ribbon=(m[4:end]-l[4:end], u[4:end]-m[4:end]), fillalpha=0.3, ylabel=\"Reproduction number\", xlabel=\"Date\", size=(600,300), label=\"Marginalised estimates\")\n\n\n\n\nPosterior distribution of \\(R_t\\) from the default model (green) and the marginalised model (orange), demonstrating the additional uncertainty arising from \\(k\\)."
  },
  {
    "objectID": "EpiEstim.html#predictive-distributions",
    "href": "EpiEstim.html#predictive-distributions",
    "title": "EpiEstim",
    "section": "Predictive distributions",
    "text": "Predictive distributions\nWe can also estimate the default and marginalised predictive distributions for reported cases. We also calculate predictive coverages as we go (reported in the next section).\n\n# Default\npCdefault = EpiEstimConditionalPredictive(7, w, Ct)\n(m, med, l, u) = calculateResults(pCdefault)\ndefault_coverage = mean((l[4:end] .&lt;= Ct[4:end]) .& (Ct[4:end] .&lt;= u[4:end]))\nplotCases = plot(4:length(m), m[4:end], ribbon=(m[4:end]-l[4:end], u[4:end]-m[4:end]), label=\"Default\", ylabel=\"Reported cases\", xlabel=\"Days\")\n\n# Marginalised\nCgrid = 0:(10*maximum(Ct))\npC = EpiEstimMarginalPredictive(w, Ct, Cgrid, windin=3)\n(m, med, l, u) = calculateResults(pC, Cgrid)\nmarginalised_coverage = mean((l[4:end] .&lt;= Ct[4:end]) .& (Ct[4:end] .&lt;= u[4:end]))\nplot!(plotCases, 4:length(m), m[4:end], ribbon=(m[4:end]-l[4:end], u[4:end]-m[4:end]), label=\"Marginalised\")\n\n# Also show the observed data\nscatter!(plotCases, 1:length(Ct), Ct, label=\"Observed\", color=:black, markersize=1.5)"
  },
  {
    "objectID": "EpiEstim.html#predictive-coverage-and-scoring-rules",
    "href": "EpiEstim.html#predictive-coverage-and-scoring-rules",
    "title": "EpiEstim",
    "section": "Predictive coverage and scoring rules",
    "text": "Predictive coverage and scoring rules\nCalculating predictive coverage:\n\nprintln(\"Predictive coverage of default EpiEstim = $(round(100*default_coverage))%\")\nprintln(\"Predictive coverage of marginalised EpiEstim = $(round(100*marginalised_coverage))%\")\n\nPredictive coverage of default EpiEstim = 87.0%\nPredictive coverage of marginalised EpiEstim = 99.0%\n\n\nand the CRPS (lower is better) for each model:\n\ninclude(\"src/scoringRules.jl\")\ndefault_crps = CRPS(pCdefault, Ct, windin=3)\nmarginalised_crps = CRPS(cumsum(pC, dims=1), Cgrid, Ct, windin=3)\n\nprintln(\"CRPS of default EpiEstim = $(default_crps)\")\nprintln(\"CRPS of marginalised EpiEstim = $(marginalised_crps)\")\n\nCRPS of default EpiEstim = 9.748611012811024\nCRPS of marginalised EpiEstim = 5.577113951260321"
  }
]